package com.server.hkj.domain;

import static com.server.hkj.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class HkjMaterialUsageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjMaterialUsageAllPropertiesEquals(HkjMaterialUsage expected, HkjMaterialUsage actual) {
        assertHkjMaterialUsageAutoGeneratedPropertiesEquals(expected, actual);
        assertHkjMaterialUsageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjMaterialUsageAllUpdatablePropertiesEquals(HkjMaterialUsage expected, HkjMaterialUsage actual) {
        assertHkjMaterialUsageUpdatableFieldsEquals(expected, actual);
        assertHkjMaterialUsageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjMaterialUsageAutoGeneratedPropertiesEquals(HkjMaterialUsage expected, HkjMaterialUsage actual) {
        assertThat(expected)
            .as("Verify HkjMaterialUsage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjMaterialUsageUpdatableFieldsEquals(HkjMaterialUsage expected, HkjMaterialUsage actual) {
        assertThat(expected)
            .as("Verify HkjMaterialUsage relevant properties")
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getLossQuantity()).as("check lossQuantity").isEqualTo(actual.getLossQuantity()))
            .satisfies(e -> assertThat(e.getUsageDate()).as("check usageDate").isEqualTo(actual.getUsageDate()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getWeight()).as("check weight").isEqualTo(actual.getWeight()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getIsDeleted()).as("check isDeleted").isEqualTo(actual.getIsDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjMaterialUsageUpdatableRelationshipsEquals(HkjMaterialUsage expected, HkjMaterialUsage actual) {
        assertThat(expected)
            .as("Verify HkjMaterialUsage relationships")
            .satisfies(e -> assertThat(e.getMaterial()).as("check material").isEqualTo(actual.getMaterial()))
            .satisfies(e -> assertThat(e.getHkjTask()).as("check hkjTask").isEqualTo(actual.getHkjTask()));
    }
}
