package com.server.hkj.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HkjEmployeeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjEmployeeAllPropertiesEquals(HkjEmployee expected, HkjEmployee actual) {
        assertHkjEmployeeAutoGeneratedPropertiesEquals(expected, actual);
        assertHkjEmployeeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjEmployeeAllUpdatablePropertiesEquals(HkjEmployee expected, HkjEmployee actual) {
        assertHkjEmployeeUpdatableFieldsEquals(expected, actual);
        assertHkjEmployeeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjEmployeeAutoGeneratedPropertiesEquals(HkjEmployee expected, HkjEmployee actual) {
        assertThat(expected)
            .as("Verify HkjEmployee auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjEmployeeUpdatableFieldsEquals(HkjEmployee expected, HkjEmployee actual) {
        assertThat(expected)
            .as("Verify HkjEmployee relevant properties")
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getIsDeleted()).as("check isDeleted").isEqualTo(actual.getIsDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHkjEmployeeUpdatableRelationshipsEquals(HkjEmployee expected, HkjEmployee actual) {
        assertThat(expected)
            .as("Verify HkjEmployee relationships")
            .satisfies(e -> assertThat(e.getUserExtra()).as("check userExtra").isEqualTo(actual.getUserExtra()));
    }
}
